// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TC.DataAccess.DatabaseContext;

namespace TC.DataAccess.Migrations
{
    [DbContext(typeof(TestingCenterDbContext))]
    [Migration("20191218020244_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TC.Entity.Entities.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Project","project");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = "system",
                            DateAdded = new DateTime(2019, 12, 17, 20, 2, 43, 948, DateTimeKind.Local).AddTicks(7358),
                            DateModified = new DateTime(2019, 12, 17, 20, 2, 43, 948, DateTimeKind.Local).AddTicks(7753),
                            Description = "",
                            IsActive = true,
                            ModifiedBy = "system",
                            Name = "Google"
                        });
                });

            modelBuilder.Entity("TC.Entity.Entities.ProjectDomain", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Domain")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectDomain","project");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = "system",
                            DateAdded = new DateTime(2019, 12, 17, 20, 2, 43, 949, DateTimeKind.Local).AddTicks(1130),
                            DateModified = new DateTime(2019, 12, 17, 20, 2, 43, 949, DateTimeKind.Local).AddTicks(1507),
                            Domain = "google.com",
                            IsActive = true,
                            ModifiedBy = "system",
                            ProjectId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedBy = "system",
                            DateAdded = new DateTime(2019, 12, 17, 20, 2, 43, 949, DateTimeKind.Local).AddTicks(2092),
                            DateModified = new DateTime(2019, 12, 17, 20, 2, 43, 949, DateTimeKind.Local).AddTicks(2110),
                            Domain = "google.pl",
                            IsActive = true,
                            ModifiedBy = "system",
                            ProjectId = 1
                        });
                });

            modelBuilder.Entity("TC.Entity.Entities.ProjectTestRunConfig", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int>("TestRunConfigId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("TestRunConfigId");

                    b.ToTable("ProjectTestRunConfig","project");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = "system",
                            DateAdded = new DateTime(2019, 12, 17, 20, 2, 43, 950, DateTimeKind.Local).AddTicks(4137),
                            DateModified = new DateTime(2019, 12, 17, 20, 2, 43, 950, DateTimeKind.Local).AddTicks(4505),
                            IsActive = true,
                            ModifiedBy = "system",
                            ProjectId = 1,
                            TestRunConfigId = 1,
                            Value = "true"
                        });
                });

            modelBuilder.Entity("TC.Entity.Entities.Screenshot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Path")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Screenshot");
                });

            modelBuilder.Entity("TC.Entity.Entities.TestInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<string>("SeleniumCommands")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("TestInfo");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = "system",
                            DateAdded = new DateTime(2019, 12, 17, 20, 2, 43, 949, DateTimeKind.Local).AddTicks(6599),
                            DateModified = new DateTime(2019, 12, 17, 20, 2, 43, 949, DateTimeKind.Local).AddTicks(6973),
                            Description = "Using google search find c# tutorial",
                            IsActive = true,
                            ModifiedBy = "system",
                            Name = "Search for c# tutorial",
                            ProjectId = 1,
                            SeleniumCommands = "[{\"OperationId\":3,\"WebDriverOperationType\":0,\"Values\":[\"https://www.google.com\"]}]"
                        });
                });

            modelBuilder.Entity("TC.Entity.Entities.TestRunConfig", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TestRunConfig");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = "system",
                            DateAdded = new DateTime(2019, 12, 17, 20, 2, 43, 950, DateTimeKind.Local).AddTicks(388),
                            DateModified = new DateTime(2019, 12, 17, 20, 2, 43, 950, DateTimeKind.Local).AddTicks(756),
                            Description = "It will take a screenshot after every command.",
                            IsActive = true,
                            ModifiedBy = "system",
                            Name = "Take Screenshot After Every Command",
                            Type = 0
                        },
                        new
                        {
                            Id = 2,
                            CreatedBy = "system",
                            DateAdded = new DateTime(2019, 12, 17, 20, 2, 43, 950, DateTimeKind.Local).AddTicks(1344),
                            DateModified = new DateTime(2019, 12, 17, 20, 2, 43, 950, DateTimeKind.Local).AddTicks(1361),
                            Description = "Test will monitor every http call.",
                            IsActive = true,
                            ModifiedBy = "system",
                            Name = "Monitoring Http Calls",
                            Type = 0
                        },
                        new
                        {
                            Id = 3,
                            CreatedBy = "system",
                            DateAdded = new DateTime(2019, 12, 17, 20, 2, 43, 950, DateTimeKind.Local).AddTicks(1394),
                            DateModified = new DateTime(2019, 12, 17, 20, 2, 43, 950, DateTimeKind.Local).AddTicks(1396),
                            Description = "Test will continue even if a command will fail.",
                            IsActive = true,
                            ModifiedBy = "system",
                            Name = "Continue After Command Failure",
                            Type = 0
                        });
                });

            modelBuilder.Entity("TC.Entity.Entities.TestRunHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TestInfoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TestInfoId")
                        .IsUnique();

                    b.ToTable("TestRunHistory");
                });

            modelBuilder.Entity("TC.Entity.Entities.TestRunResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CommandTestGuid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSuccesful")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RunTime")
                        .HasColumnType("int");

                    b.Property<int>("ScreenshotId")
                        .HasColumnType("int");

                    b.Property<int?>("TestRunHistoryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ScreenshotId")
                        .IsUnique();

                    b.HasIndex("TestRunHistoryId");

                    b.ToTable("TestRunRestult");
                });

            modelBuilder.Entity("TC.Entity.Entities.User.UserProjectStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserProjectStatus");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = "system",
                            DateAdded = new DateTime(2019, 12, 17, 20, 2, 43, 945, DateTimeKind.Local).AddTicks(5192),
                            DateModified = new DateTime(2019, 12, 17, 20, 2, 43, 947, DateTimeKind.Local).AddTicks(3992),
                            IsActive = true,
                            ModifiedBy = "system",
                            Name = "Pending"
                        },
                        new
                        {
                            Id = 2,
                            CreatedBy = "system",
                            DateAdded = new DateTime(2019, 12, 17, 20, 2, 43, 947, DateTimeKind.Local).AddTicks(4506),
                            DateModified = new DateTime(2019, 12, 17, 20, 2, 43, 947, DateTimeKind.Local).AddTicks(4523),
                            IsActive = true,
                            ModifiedBy = "system",
                            Name = "Accepted"
                        },
                        new
                        {
                            Id = 3,
                            CreatedBy = "system",
                            DateAdded = new DateTime(2019, 12, 17, 20, 2, 43, 947, DateTimeKind.Local).AddTicks(4531),
                            DateModified = new DateTime(2019, 12, 17, 20, 2, 43, 947, DateTimeKind.Local).AddTicks(4534),
                            IsActive = true,
                            ModifiedBy = "system",
                            Name = "Rejected"
                        },
                        new
                        {
                            Id = 4,
                            CreatedBy = "system",
                            DateAdded = new DateTime(2019, 12, 17, 20, 2, 43, 947, DateTimeKind.Local).AddTicks(4537),
                            DateModified = new DateTime(2019, 12, 17, 20, 2, 43, 947, DateTimeKind.Local).AddTicks(4539),
                            IsActive = true,
                            ModifiedBy = "system",
                            Name = "Deleted"
                        });
                });

            modelBuilder.Entity("TC.Entity.Entities.UserInProject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int>("UserModelId")
                        .HasColumnType("int");

                    b.Property<int>("UserProjectStatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UserModelId");

                    b.HasIndex("UserProjectStatusId");

                    b.ToTable("UserInProject","user");
                });

            modelBuilder.Entity("TC.Entity.Entities.UserModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("MasterId")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<int?>("UserModelId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MasterId");

                    b.ToTable("UserModel","user");
                });

            modelBuilder.Entity("TC.Entity.Entities.ProjectDomain", b =>
                {
                    b.HasOne("TC.Entity.Entities.Project", "Project")
                        .WithMany("ProjectDomains")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TC.Entity.Entities.ProjectTestRunConfig", b =>
                {
                    b.HasOne("TC.Entity.Entities.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TC.Entity.Entities.TestRunConfig", "TestRunConfig")
                        .WithMany()
                        .HasForeignKey("TestRunConfigId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TC.Entity.Entities.TestInfo", b =>
                {
                    b.HasOne("TC.Entity.Entities.Project", "Project")
                        .WithMany("TestInfos")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TC.Entity.Entities.TestRunHistory", b =>
                {
                    b.HasOne("TC.Entity.Entities.TestInfo", "TestInfo")
                        .WithOne("TestRunHistory")
                        .HasForeignKey("TC.Entity.Entities.TestRunHistory", "TestInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TC.Entity.Entities.TestRunResult", b =>
                {
                    b.HasOne("TC.Entity.Entities.Screenshot", "Screenshot")
                        .WithOne("TestRunResult")
                        .HasForeignKey("TC.Entity.Entities.TestRunResult", "ScreenshotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TC.Entity.Entities.TestRunHistory", null)
                        .WithMany("TestRunResults")
                        .HasForeignKey("TestRunHistoryId");
                });

            modelBuilder.Entity("TC.Entity.Entities.UserInProject", b =>
                {
                    b.HasOne("TC.Entity.Entities.Project", "Project")
                        .WithMany("UserInProject")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TC.Entity.Entities.UserModel", "UserModel")
                        .WithMany()
                        .HasForeignKey("UserModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TC.Entity.Entities.User.UserProjectStatus", "UserProjectStatus")
                        .WithMany()
                        .HasForeignKey("UserProjectStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TC.Entity.Entities.UserModel", b =>
                {
                    b.HasOne("TC.Entity.Entities.UserModel", "Master")
                        .WithMany()
                        .HasForeignKey("MasterId");
                });
#pragma warning restore 612, 618
        }
    }
}
